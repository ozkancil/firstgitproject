this is my first github class
conflict"->
new remote code
1: github day one;
…or create a new repository on the command line
echo "# firstgitproject" >> README.md
git init -->creates a git folder in our computer
git add README.md
git commit -m "first commit"
git branch -M main ---> creating a branch called main
git remote add origin git@github.com:ozkancil/firstgitproject.git
git push -u origin main
…or push an existing repository from the command line
git remote add origin git@github.com:ozkancil/firstgitproject.git --->connects local project to remote repository.
git branch -M main
git push -u origin main
…or import code from another repository
You can initialize this repository with code from a Subversion, Mercurial, or TFS project.

we must use terminal to store and to send porjects.


=====
git ignore:
What? .gitignore should be created at the project level.
it is used to ignore/hide the files
the files in .gitignore will not be added  and committed and pushed/
=======================
create 3 files: notes2.txt, notes3.txt, notes4.txt
and create .gitignore file in hte project level
Then put notes3.txt path in .gitignore file
then commit
then push
then notes3.txt should not be pushed in github

===
steps for getting code from remote repo?
git fetch
git merge
git pull

===========
what is conflict?
WHen does it happen?
conflict is havin different code on the same line, then that is a conflict, that is if you are sharing the same files, classes with same name.
so when we try to pull we get "conflict".
How to resolve conflict?
We should manually fix the code. There is an automatic way but its not recommended. Best to manually fix it.
Steps after conflict:
git add .
git commit -m " "
git push

========
can i push my local commits if i do not have the latest commit from github?
No, because of hte security we must have hte latest code/commit from github before push
-->Pull before push==> (git pull--> git add . ->git commit -m " " ->git push

=================
git branch -M main
No one works on master branch cuz if deployed and there are mistakes then you can get fired.
We will do merge on master branch. Someone will check our codes before we merge.
if all code is good and reviewed then pull request then merge to remote to master branch.
the experienced guy will merge code and push to master class so we will not do it.
Each developr crates there own branch. Testers only have one branch. ANd they have sprint 10.4. so everyone clones and tests these branches.
after it is tested lead merges to main branch
we can create our own branch adn push or we can do one side branch and all can work on one branch. we never write code in master branch.
we work on the feature branches. implimentatin can be different depending on the business.
only one branch for sprint. Side branch, future branch.
we work on copy we do not want to break original.
PR is a pull request, lead developer. then that guyt reviews code, see if any rpoblems not logic check. double check and approve code.
then they will send code. if there is a problem then only affects that branch not main code.
we can use same terminal, and we will use intellij terminal.

git branch or -a will lshow us all branch. main branch means master branch. -a will show us all branches
git branch sp10 ti will create branch sp10
git checkout freature  will switch to feature branch
git branch -d feature  delete feature branch
git checkout master switch to master branch
git merge feature --> master branch      this will merge feature branch into master branch
git merge master -->feature branch     this will merge master to feature branch if u are on feature
git push --set-upstream origin feature--> use whne you push for the first time. after the first time, git push is enough.

====day 02
BRANCHING
git branch   ozkan_sp10_sparrow

git checkout   ozkan_sp10_sparrow

write code in this feature/side branch
--create a new file branch: notes7.txt
--commit -m "new code"
we do     git push --set-upstream origin ozkan_sp10_sparrow
for the first time
then git push

--after last step pull request will be automatically created in github
--the leader will check and merge and confirm merge.


===
lcoal, my local branch, remote branch , github/master branch
This remote branch will not be added to github until someone checks and merges and confirms the merge.
local branch is created in intellij, on git.

=======================
after the merge, feature branch/side branch and remote master is upto date
but local is not updated.
For this now we need to::
1)git checkout master
2. git pull

======
do not write codes in main branch. its dangerous.
do it on feature/side branches
 do not push, pull or delete codes from main.
